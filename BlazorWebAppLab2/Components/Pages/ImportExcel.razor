@page "/importexcel"
@* @attribute [Authorize(Roles = "Administrator")]
 *@
@rendermode InteractiveServer
@using ClosedXML.Excel
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using BlazorWebAppLab2.Data
@inject IDbContextFactory<BlazorWebAppLab2.Data.ApplicationDbContext> DbFactory
@using Microsoft.AspNetCore.Components.Forms;


<PageTitle>Загрузка файла Excel для импорта в базу данных</PageTitle>

<p>
    <label>
        Укажите файл Excel для импорта:
        <InputFile OnChange="LoadFiles" />
    </label>
</p>
@if (isLoading)
{
    <p>Uploading...</p>
}
else
{
    <ul>


        <div>Количество импортированных сотрудников: @childworkerlist.Count()</div>
        <div>Количество импортированных детей: @childworkerlist.Count()</div>
        <div>Количество импортированных подарков: @presentlist.Count()</div>
        @if (StartTime != null)
        {
            TimeSpan ts = (EndTime ?? DateTime.Now).Subtract(StartTime ?? DateTime.Now);
            <div>
                Время выполнения: @String.Format("{0:00}:{1:00}", ts.Seconds, ts.Milliseconds / 10);
            </div>
        }
    </ul>
}

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div>Error: @ErrorMessage</div>
}

@code {
    //ApplicationDbContext context = default!;

    protected override async Task OnInitializedAsync()
    {
    }

    public string ErrorMessage { get; set; } = "";

    DateTime? StartTime;
    DateTime? EndTime;

    public List<Worker> workerlist = new();
    public List<ChildWorker> childworkerlist = new();
    public List<Present> presentlist = new();

    //public List<IdentityUserRole<string>> userrolesList = new();



    private bool isLoading;

    string? errworksheet { get; set; } = "";

    int? errindexrow { get; set; } = 0;
    const int MAX_FILESIZE = 5000 * 1024; // 5 MB

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {

        isLoading = true;


        var browserFile = e.File;

        if (browserFile != null)
        {
            try
            {
                using (var fileStream = browserFile.OpenReadStream(MAX_FILESIZE))//от утечек
                {

                    workerlist = new();
                    childworkerlist = new();
                    presentlist = new();

                    var randomFile = Path.GetTempFileName();
                    var extension = Path.GetExtension(browserFile.Name);
                    var targetFilePath = Path.ChangeExtension(randomFile, extension);
                    using (var destinationStream = new FileStream(targetFilePath, FileMode.Create))//памяти
                    {//не то, чтобы это довольно плохо, просто потом сборщик мусора будет немного грузить сервер.
                        await fileStream.CopyToAsync(destinationStream);
                        StartTime = DateTime.Now;
                        await GetDataTableFromExcelAsync(destinationStream);
                        EndTime = DateTime.Now;
                    }
                }
            }
            catch (Exception exception)
            {
                ErrorMessage = exception.Message;
            }
        }

        isLoading = false;
    }
    public async Task GetDataTableFromExcelAsync(FileStream file)
    {
        using (var context = DbFactory.CreateDbContext())
        {


            using (XLWorkbook workbook = new XLWorkbook(file))
            {
                //var passwordHasher = new PasswordHasher<ApplicationUser>();

                try
                {
                    foreach (IXLWorksheet worksheet in workbook.Worksheets)
                    {
                        errindexrow = 1;
                        errworksheet = worksheet.Name;
                        if (worksheet.Name == "Workers")
                        {
                            foreach (IXLRow row in worksheet.RowsUsed().Skip(1))
                            {
                                errindexrow++;
                                Worker worker = new Worker();
                                var range = worksheet.RangeUsed();
                                var table = range!.AsTable();
                                worker.WorkerId = int.Parse(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "WorkerId").RangeAddress.FirstAddress.ColumnNumber).Value.ToString());
                                worker.LastName = row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "LastName").RangeAddress.FirstAddress.ColumnNumber).Value.ToString();
                                worker.FirstName = row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "FirstName").RangeAddress.FirstAddress.ColumnNumber).Value.ToString();
                                worker.SecondName = row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "SecondName").RangeAddress.FirstAddress.ColumnNumber).Value.ToString();
                                worker.JobTitle = row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "JobTitle").RangeAddress.FirstAddress.ColumnNumber).Value.ToString();
                                worker.Division = row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "Division").RangeAddress.FirstAddress.ColumnNumber).Value.ToString();
                                worker.DateJob = DateOnly.Parse(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "DateJob").RangeAddress.FirstAddress.ColumnNumber).Value.ToString());

                                workerlist.Add(worker);

                            }
                        }
                        errindexrow = 1;



                        if (worksheet.Name == "ChildWorkers")
                        {
                            foreach (IXLRow row in worksheet.RowsUsed().Skip(1))
                            {
                                errindexrow++;

                                ChildWorker childworker = new ChildWorker();
                                var range = worksheet.RangeUsed();
                                var table = range!.AsTable();

                                childworker.ChildWorkerId = int.Parse(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "ChildWorkerId").RangeAddress.FirstAddress.ColumnNumber).Value.ToString());
                                childworker.ChildName = row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "ChildName").RangeAddress.FirstAddress.ColumnNumber).Value.ToString();
                                childworker.DateBirth = DateOnly.Parse(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "DateBirth").RangeAddress.FirstAddress.ColumnNumber).Value.ToString());
                                childworker.WorkerId = int.Parse(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "WorkerId").RangeAddress.FirstAddress.ColumnNumber).Value.ToString());

                                childworkerlist.Add(childworker);

                            }
                        }


                        errindexrow = 1;
                        if (worksheet.Name == "Presents")
                        {
                            foreach (IXLRow row in worksheet.RowsUsed().Skip(1))
                            {
                                errindexrow++;
                                Present present = new Present();
                                var range = worksheet.RangeUsed();
                                var table = range!.AsTable();

                                present.PresentId = int.Parse(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "PresentId").RangeAddress.FirstAddress.ColumnNumber).Value.ToString());
                                present.DatePresent = DateOnly.Parse(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "DatePresent").RangeAddress.FirstAddress.ColumnNumber).Value.ToString());
                                present.Cost = double.Parse(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "Cost").RangeAddress.FirstAddress.ColumnNumber).Value.ToString());
                                present.ChildWorkerId = int.Parse(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "ChildWorkerId").RangeAddress.FirstAddress.ColumnNumber).Value.ToString());


                                presentlist.Add(present);
                            }
                        }
                    }


                    errworksheet = "";
                    foreach (var el in workerlist)
                    {
                        el.WorkerId = 0;
                    }
                    foreach (var el in childworkerlist)
                    {
                        el.ChildWorkerId = 0;
                    }
                    foreach (var el in presentlist)
                    {
                        el.PresentId = 0;
                    }
                 
                    using (var tr = context.Database.BeginTransaction())
                    {
                        @* context.Rezults.ExecuteDelete();
                    context.RelNormativs.ExecuteDelete();
                    context.Normativs.ExecuteDelete();
                    context.Users.ExecuteDelete();
                    context.SchoolClasses.ExecuteDelete(); *@

                        context.AddRange(workerlist);
                        context.AddRange(childworkerlist);
                        context.AddRange(presentlist);
                      

                        await context.SaveChangesAsync();

                        //var releid = context.Roles.FirstOrDefault(d => d.Name == "Uchenik")!.Id;

                        // foreach (var user in ucheniksList)
                        // {
                        //     userrolesList.Add(new IdentityUserRole<string>
                        //         {
                        //             UserId = user.Id,
                        //             RoleId = releid
                        //         });
                        // }

                        //context.AddRange(userrolesList);

                        await context.SaveChangesAsync();

                        tr.Commit();
                    }
                }
                catch (Exception exception)
                {
                    if (errworksheet != "")
                        ErrorMessage = "Ошибка в импорте в таблице " + errworksheet + ", строка - " + errindexrow.ToString();
                    ErrorMessage = exception.Message;
                }

            }
        }

    }
}