@page "/workers/edit"
@using Microsoft.EntityFrameworkCore
@using BlazorWebAppLab2.Data
@inject IDbContextFactory<BlazorWebAppLab2.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Редактировать</PageTitle>

<h1>Редактировать</h1>

<h2>Сотрудник</h2>
<hr />
@if (Worker is null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Worker" OnValidSubmit="UpdateWorker" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Worker.WorkerId" value="@Worker.WorkerId" />
                <div class="mb-3">
                    <label for="lastname" class="form-label">Фамилия:</label>
                    <InputText id="lastname" @bind-Value="Worker.LastName" class="form-control" />
                    <ValidationMessage For="() => Worker.LastName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="firstname" class="form-label">Имя:</label>
                    <InputText id="firstname" @bind-Value="Worker.FirstName" class="form-control" />
                    <ValidationMessage For="() => Worker.FirstName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="secondname" class="form-label">Отчество:</label>
                    <InputText id="secondname" @bind-Value="Worker.SecondName" class="form-control" />
                    <ValidationMessage For="() => Worker.SecondName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="jobtitle" class="form-label">Должность:</label>
                    <InputText id="jobtitle" @bind-Value="Worker.JobTitle" class="form-control" />
                    <ValidationMessage For="() => Worker.JobTitle" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="division" class="form-label">Подразделение:</label>
                    <InputText id="division" @bind-Value="Worker.Division" class="form-control" />
                    <ValidationMessage For="() => Worker.Division" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="datejob" class="form-label">Дата приема:</label>
                    <InputDate id="datejob" @bind-Value="Worker.DateJob" class="form-control" />
                    <ValidationMessage For="() => Worker.DateJob" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Сохранить</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/workers">Назад к списку</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int WorkerId { get; set; }

    [SupplyParameterFromForm]
    private Worker? Worker { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Worker ??= await context.Workers.FirstOrDefaultAsync(m => m.WorkerId == WorkerId);

        if (Worker is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateWorker()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Worker!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!WorkerExists(Worker!.WorkerId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/workers");
    }

    private bool WorkerExists(int workerid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Workers.Any(e => e.WorkerId == workerid);
    }
}
