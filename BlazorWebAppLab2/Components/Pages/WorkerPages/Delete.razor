@page "/workers/delete"
@using Microsoft.EntityFrameworkCore
@using BlazorWebAppLab2.Data
@inject IDbContextFactory<BlazorWebAppLab2.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Удалить сотрудника</PageTitle>

<h1>Удалить сотрудника</h1>

<p>Удалить сотрудника?</p>
<div>
    <h2>Сотрудник</h2>
    <hr />
    @if (worker is null)
    {
        <p><em>Загрузка...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Фамилия</dt>
            <dd class="col-sm-10">@worker.LastName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Имя</dt>
            <dd class="col-sm-10">@worker.FirstName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Отчество</dt>
            <dd class="col-sm-10">@worker.SecondName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Должность</dt>
            <dd class="col-sm-10">@worker.JobTitle</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Подразделение</dt>
            <dd class="col-sm-10">@worker.Division</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Дата приема</dt>
            <dd class="col-sm-10">@worker.DateJob</dd>
        </dl>
        <EditForm method="post" Model="worker" OnValidSubmit="DeleteWorker" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(worker is null)">Удалить</button> |
            <a href="/workers">Назад к списку</a>
        </EditForm>
    }
</div>

@code {
    private Worker? worker;

    [SupplyParameterFromQuery]
    private int WorkerId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        worker = await context.Workers.FirstOrDefaultAsync(m => m.WorkerId == WorkerId);

        if (worker is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteWorker()
    {
        using var context = DbFactory.CreateDbContext();
        context.Workers.Remove(worker!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/workers");
    }
}
