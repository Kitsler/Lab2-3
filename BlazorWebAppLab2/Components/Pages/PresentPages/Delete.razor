@page "/presents/delete"
@using Microsoft.EntityFrameworkCore
@using BlazorWebAppLab2.Data
@inject IDbContextFactory<BlazorWebAppLab2.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Удалить подарок</PageTitle>

<h1>Удалить подарок</h1>

<p>Удалить подарок?</p>
<div>
    <h2>Подарок</h2>
    <hr />
    @if (present is null)
    {
        <p><em>Загрузка...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Дата подарка</dt>
            <dd class="col-sm-10">@present.DatePresent</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Цена</dt>
            <dd class="col-sm-10">@present.Cost</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Id ребенка</dt>
            <dd class="col-sm-10">@present.ChildWorkerId</dd>
        </dl>
        <EditForm method="post" Model="present" OnValidSubmit="DeletePresent" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(present is null)">Удалить</button> |
            <a href="/presents">Назад к списку</a>
        </EditForm>
    }
</div>

@code {
    private Present? present;

    [SupplyParameterFromQuery]
    private int PresentId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        present = await context.Presents.FirstOrDefaultAsync(m => m.PresentId == PresentId);

        if (present is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeletePresent()
    {
        using var context = DbFactory.CreateDbContext();
        context.Presents.Remove(present!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/presents");
    }
}
