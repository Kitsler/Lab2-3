@page "/childworkers/edit"
@using Microsoft.EntityFrameworkCore
@using BlazorWebAppLab2.Data
@inject IDbContextFactory<BlazorWebAppLab2.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Редактировать</PageTitle>

<h1>Редактировать</h1>

<h2>Дети</h2>
<hr />
@if (ChildWorker is null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="ChildWorker" OnValidSubmit="UpdateChildWorker" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="ChildWorker.ChildWorkerId" value="@ChildWorker.ChildWorkerId" />
                <div class="mb-3">
                    <label for="childname" class="form-label">Имя ребенка:</label>
                    <InputText id="childname" @bind-Value="ChildWorker.ChildName" class="form-control" />
                    <ValidationMessage For="() => ChildWorker.ChildName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="datebirth" class="form-label">Дата рождения:</label>
                    <InputDate id="datebirth" @bind-Value="ChildWorker.DateBirth" class="form-control" />
                    <ValidationMessage For="() => ChildWorker.DateBirth" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="workerid" class="form-label">Id сотрудника:</label>
                    <InputNumber id="workerid" @bind-Value="ChildWorker.WorkerId" class="form-control" />
                    <ValidationMessage For="() => ChildWorker.WorkerId" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Сохранить</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/childworkers">Назад к списку</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int ChildWorkerId { get; set; }

    [SupplyParameterFromForm]
    private ChildWorker? ChildWorker { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        ChildWorker ??= await context.ChildWorkers.FirstOrDefaultAsync(m => m.ChildWorkerId == ChildWorkerId);

        if (ChildWorker is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateChildWorker()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(ChildWorker!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ChildWorkerExists(ChildWorker!.ChildWorkerId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/childworkers");
    }

    private bool ChildWorkerExists(int childworkerid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.ChildWorkers.Any(e => e.ChildWorkerId == childworkerid);
    }
}
